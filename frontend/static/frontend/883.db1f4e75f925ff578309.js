"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[883,446],{883:(e,r,t)=>{t.r(r),t.d(r,{default:()=>o});var a=t(540),n=t(946);function o(){const{user:e,loggedIn:r,retrieveUserData:t,setLogout:o,setErrorMessage:s,currentSeason:c,selectPicksState:i,contextLoading:l}=(0,n.Xn)();if(!l)return a.createElement("div",{style:{width:"100%"}},a.createElement("div",{className:"row my-2"},c.year&&a.createElement("a",{className:"col card rounded-15 clickable link-no-decorations me-1",href:`/raceresults?season=${c.year}`},a.createElement("div",{className:"card-body"},a.createElement("h1",null,"Race Results"))),a.createElement("a",{className:"col card rounded-15 clickable link-no-decorations ms-1",href:"/announcements?page=1"},a.createElement("div",{className:"card-body"},a.createElement("h1",null,"Announcements")))),a.createElement("div",{className:"row my-2"},c.year&&a.createElement("a",{className:"col card rounded-15 clickable link-no-decorations",href:`/standings?season=${c.year}`},a.createElement("div",{className:"card-body"},a.createElement("h1",null,"Standings")))),r&&i&&a.createElement("div",{className:"row my-2"},a.createElement("a",{className:"col card rounded-15 clickable link-no-decorations",href:"/select-picks"},a.createElement("div",{className:"card-body"},a.createElement("h1",null,"Select your picks!")))))}t(446)},446:(e,r,t)=>{t.r(r),t.d(r,{default:()=>l,useSeasonContext:()=>d});var a=t(540),n=t(974),o=t(767),s=t(606),c=t(946);const i=(0,a.createContext)();function l(){const{setErrorMessage:e,setSuccessMessage:r,setModalErrorMessage:t,resetApplicationMessages:l}=(0,c.Xn)(),d=(0,o.g)().seasonYear,[u,m]=(0,a.useState)(null),[h,g]=(0,a.useState)(!1);async function f(){const r=await(0,n.oK)(d);let t={};return 404===r.status?(m(!1),void g(!1)):r.error||200!=r.status?(e("There was an error loading the season"),g(!1),void console.log(r.error)):(t=r.season,t.competitorsSortedNumber=r.competitorsSortedNumber,t.competitorsSortedPoints=r.competitorsSortedPoints,m(t),void g(!1))}return a.createElement(i.Provider,{value:{season:u,seasonLoading:h,retrieveSeason:f,createSeasonRace:async function(e){l();const a=await(0,s.Ir)(e);return a.error||200!=a.status?(t("There was an error creating the race"),console.log(a.error),!1):(r("Race created"),f(),!0)},addSeasonRaceResults:async function(e){l();const a=await(0,s.yN)(e);return a.error?(t("There was an error adding the results"),console.log(a.error),!1):200!=a.status?(t("Be sure that the information inputted is correct"),!1):(r("Race result saved"),f(),!0)},editSeasonRace:async function(e){l();let a=await(0,s._O)(e);return a.error?(t("There was an error editing the race"),console.log(a.error),!1):200!=a.status?(t("Be sure the information is valid"),!1):(r("Changes saved"),f(),!0)},deleteSeasonRace:async function(a){l();let n=await(0,s.DK)(a,d);if(n.error||200!=n.status)return console.log(n.error),t("There was an error deleting the race"),void e("There was an error deleting the race");r("Race deleted"),f()},createSeasonCompetitor:async function(e){l();const a=await(0,s.To)(e);return a.error?(t("There was an error submiting the competitor"),console.log(a.error),!1):a.riderExists?(t("A rider with that number already exists"),!1):a.seasonNotFound?(t("The season was not found of which you want to add the competitor"),!1):201!=a.status?(t("Make sure the information is correct and valid"),!1):(r("Rider created"),f(),!0)},editSeasonCompetitor:async function(e){l();const a=await(0,s.qZ)(e);return a.error?(console.log(a.error),t("There was an error editing the rider"),!1):200!=a.status?(t("Make sure the information is valid"),!1):(r("Changes saved"),f(),!0)},deleteSeasonCompetitor:async function(e,a){l();const n=await(0,s.Se)(e,a);return n.error||200!=n.status?(t("There was an error deleting the rider"),console.log(n.error),!1):(r("Rider deleted"),f(),!0)}}},a.createElement(o.sv,null))}function d(){return(0,a.useContext)(i)}}}]);